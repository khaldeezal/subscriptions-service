openapi: 3.0.3
info:
  title: Subscriptions API
  version: "1.0"
servers:
  - url: http://localhost:8088
paths:
  /api/v1/subscriptions:
    get:
      summary: List subscriptions
      parameters:
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
        - in: query
          name: service_name
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: page_size
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200': { description: OK }
    post:
      summary: Create subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionInput'
      responses:
        '201': { description: Created }
  /api/v1/subscriptions/{id}:
    get:
      summary: Get subscription by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    put:
      summary: Update subscription
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionInput'
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    delete:
      summary: Delete subscription
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
        '404': { description: Not found }
  /api/v1/cost:
    get:
      summary: Sum of subscription cost for period (inclusive months)
      parameters:
        - in: query
          name: from
          required: true
          description: YYYY-MM (или MM-YYYY)
          schema: { type: string }
        - in: query
          name: to
          required: true
          description: YYYY-MM (или MM-YYYY)
          schema: { type: string }
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
        - in: query
          name: service_name
          schema: { type: string }
      responses:
        '200': { description: OK }
components:
  schemas:
    Subscription:
      type: object
      properties:
        id: { type: string, format: uuid }
        service_name: { type: string }
        price: { type: integer, minimum: 0 }
        user_id: { type: string, format: uuid }
        start_date: { type: string, example: "2025-07" }
        end_date: { type: string, nullable: true, example: "2025-12" }
    SubscriptionInput:
      type: object
      required: [service_name, price, user_id, start_date]
      properties:
        service_name: { type: string }
        price: { type: integer, minimum: 0 }
        user_id: { type: string, format: uuid }
        start_date: { type: string, example: "2025-07" }
        end_date: { type: string, nullable: true, example: "2025-12" }
